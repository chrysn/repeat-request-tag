[
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/6",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/6/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/6/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/6",
    "id": 239441473,
    "number": 6,
    "title": "Duplicate text on concurrent operations.",
    "user": {
      "login": "gselander",
      "id": 11752340,
      "avatar_url": "https://avatars0.githubusercontent.com/u/11752340?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gselander",
      "html_url": "https://github.com/gselander",
      "followers_url": "https://api.github.com/users/gselander/followers",
      "following_url": "https://api.github.com/users/gselander/following{/other_user}",
      "gists_url": "https://api.github.com/users/gselander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gselander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gselander/subscriptions",
      "organizations_url": "https://api.github.com/users/gselander/orgs",
      "repos_url": "https://api.github.com/users/gselander/repos",
      "events_url": "https://api.github.com/users/gselander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gselander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2017-06-29T10:59:45Z",
    "updated_at": "2017-06-30T18:18:09Z",
    "closed_at": "2017-06-30T18:18:09Z",
    "body": "\"A CoAP client MUST set the Request-Tag option in the case of different concurrent blockwise request operations to the same resource. If the CoAP client is running a blockwise request operation without the Request-Tag, and wants to concurrently start another blockwise request operations to the same resource without cancelling the first, then the CoAP client MUST set the Request-Tag.\"\r\n\r\nThese sentences are quite similar. I think the second sentence is sufficient and the first can be removed."
  },
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/5",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/5/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/5/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/5",
    "id": 239427888,
    "number": 5,
    "title": "Characterization of Request-Tag",
    "user": {
      "login": "gselander",
      "id": 11752340,
      "avatar_url": "https://avatars0.githubusercontent.com/u/11752340?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gselander",
      "html_url": "https://github.com/gselander",
      "followers_url": "https://api.github.com/users/gselander/followers",
      "following_url": "https://api.github.com/users/gselander/following{/other_user}",
      "gists_url": "https://api.github.com/users/gselander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gselander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gselander/subscriptions",
      "organizations_url": "https://api.github.com/users/gselander/orgs",
      "repos_url": "https://api.github.com/users/gselander/repos",
      "events_url": "https://api.github.com/users/gselander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gselander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-06-29T10:04:45Z",
    "updated_at": "2017-06-30T18:18:09Z",
    "closed_at": "2017-06-30T18:18:09Z",
    "body": "Reading this part many times: \r\n\"It enables the receiving CoAP server to reliably assemble request payloads (blocks) to their message bodies when the individual payloads are integrity protected, and it enables the sending CoAP server to process simultaneous operations on a single resource if the server supports it.\"\r\n- some questions appear:\r\n\r\n-is \"reliable\" only a characterization of the first part?\r\n-is integrity protection only relevant to the first part?\r\n- Should it be \"sending CoAP server\"?\r\n\r\nIs the following text a potential replacement?\r\n\r\n\"It enables the receiving CoAP server supporting this option to reliably assemble request payloads (blocks) to their message bodies, and reliably process simultaneous blockwise request operations on a single resource. The requests MUST to be be integrity protected in order to protect against interchange of blocks between different message bodies.\""
  },
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/4",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/4/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/4/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/4/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/4",
    "id": 238775439,
    "number": 4,
    "title": "Integrity protection of Repeat application 5",
    "user": {
      "login": "gselander",
      "id": 11752340,
      "avatar_url": "https://avatars0.githubusercontent.com/u/11752340?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gselander",
      "html_url": "https://github.com/gselander",
      "followers_url": "https://api.github.com/users/gselander/followers",
      "following_url": "https://api.github.com/users/gselander/following{/other_user}",
      "gists_url": "https://api.github.com/users/gselander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gselander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gselander/subscriptions",
      "organizations_url": "https://api.github.com/users/gselander/orgs",
      "repos_url": "https://api.github.com/users/gselander/repos",
      "events_url": "https://api.github.com/users/gselander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gselander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2017-06-27T08:34:35Z",
    "updated_at": "2017-06-28T20:54:56Z",
    "closed_at": "2017-06-28T20:54:56Z",
    "body": "If I understand right, the protection here is against clients which make requests claiming to come from other clients. Maybe we should motivate why it is allowed to make these requests without security in the first place. Is the main application /.well-known/core?"
  },
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/3",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/3/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/3/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/3/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/3",
    "id": 238042778,
    "number": 3,
    "title": "Should we disallow Request-Tag without value?",
    "user": {
      "login": "gselander",
      "id": 11752340,
      "avatar_url": "https://avatars0.githubusercontent.com/u/11752340?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gselander",
      "html_url": "https://github.com/gselander",
      "followers_url": "https://api.github.com/users/gselander/followers",
      "following_url": "https://api.github.com/users/gselander/following{/other_user}",
      "gists_url": "https://api.github.com/users/gselander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gselander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gselander/subscriptions",
      "organizations_url": "https://api.github.com/users/gselander/orgs",
      "repos_url": "https://api.github.com/users/gselander/repos",
      "events_url": "https://api.github.com/users/gselander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gselander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2017-06-23T05:16:02Z",
    "updated_at": "2017-06-29T10:58:35Z",
    "closed_at": null,
    "body": "Reading \"Every message in which the Block1 option is set is considered to carry a Request-Tag . . . \" I wonder about the potential confusion between a message with the Block1 option without Request-Tag and a message with the Block1 option with empty Request-Tag option, i.e. no value. As I read it we allow Request-Tag without value (length 0). Then we have two \"special classes\" of Block1 options, for which equality needs to be tested. Or should we require at least 1 byte of value? "
  },
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/2",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/2/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/2/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/2/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/2",
    "id": 237509024,
    "number": 2,
    "title": "Request-Tag: Check NoCacheKey",
    "user": {
      "login": "chrysn",
      "id": 442326,
      "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrysn",
      "html_url": "https://github.com/chrysn",
      "followers_url": "https://api.github.com/users/chrysn/followers",
      "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
      "organizations_url": "https://api.github.com/users/chrysn/orgs",
      "repos_url": "https://api.github.com/users/chrysn/repos",
      "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrysn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "chrysn",
      "id": 442326,
      "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrysn",
      "html_url": "https://github.com/chrysn",
      "followers_url": "https://api.github.com/users/chrysn/followers",
      "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
      "organizations_url": "https://api.github.com/users/chrysn/orgs",
      "repos_url": "https://api.github.com/users/chrysn/repos",
      "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrysn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "chrysn",
        "id": 442326,
        "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chrysn",
        "html_url": "https://github.com/chrysn",
        "followers_url": "https://api.github.com/users/chrysn/followers",
        "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
        "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
        "organizations_url": "https://api.github.com/users/chrysn/orgs",
        "repos_url": "https://api.github.com/users/chrysn/repos",
        "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chrysn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2017-06-21T11:57:42Z",
    "updated_at": "2017-06-27T10:30:30Z",
    "closed_at": null,
    "body": "As far as I understand, NoCacheKey becomes irrelevant if an option is both critical and unsafe (because it has to be *understood* by all parties anyway); nevertheless, it remains to decide whether the option should be part of the Cache Key, because that's part of the option number, and implementations will be glad if they can use the behavior implied by number."
  },
  {
    "url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/1",
    "repository_url": "https://api.github.com/repos/chrysn/repeat-request-tag",
    "labels_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/1/labels{/name}",
    "comments_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/1/comments",
    "events_url": "https://api.github.com/repos/chrysn/repeat-request-tag/issues/1/events",
    "html_url": "https://github.com/chrysn/repeat-request-tag/issues/1",
    "id": 237504707,
    "number": 1,
    "title": "Repeat for non-protected applications",
    "user": {
      "login": "chrysn",
      "id": 442326,
      "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrysn",
      "html_url": "https://github.com/chrysn",
      "followers_url": "https://api.github.com/users/chrysn/followers",
      "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
      "organizations_url": "https://api.github.com/users/chrysn/orgs",
      "repos_url": "https://api.github.com/users/chrysn/repos",
      "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrysn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "chrysn",
      "id": 442326,
      "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrysn",
      "html_url": "https://github.com/chrysn",
      "followers_url": "https://api.github.com/users/chrysn/followers",
      "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
      "organizations_url": "https://api.github.com/users/chrysn/orgs",
      "repos_url": "https://api.github.com/users/chrysn/repos",
      "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrysn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "chrysn",
        "id": 442326,
        "avatar_url": "https://avatars1.githubusercontent.com/u/442326?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chrysn",
        "html_url": "https://github.com/chrysn",
        "followers_url": "https://api.github.com/users/chrysn/followers",
        "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
        "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
        "organizations_url": "https://api.github.com/users/chrysn/orgs",
        "repos_url": "https://api.github.com/users/chrysn/repos",
        "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chrysn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2017-06-21T11:40:26Z",
    "updated_at": "2017-06-23T05:06:34Z",
    "closed_at": "2017-06-23T05:06:34Z",
    "body": "I'd consider toning down the \"Repeat option MUST be integrity\r\nprotected\" part. Off my head, amplification mitigation against fake\r\nsource addresses comes to my mind. (Eg. a public RD might, when a new\r\nclient first ask for a 1024+ byte message with a ~20 byte one, send\r\nRepeat to make sure it does not participate in NTP-style DDOS)."
  }
]
